{
  "version": 3,
  "sources": ["../../../src/helpers.js", "../../../src/customer-mapping.js", "../../../src/location-mapping.js", "../../../src/product-mapping.js", "../../../src/data_pull.js", "../../../src/index.js", "../../../src/location-mutation-handler.js", "../../../src/location-mutations.js"],
  "sourceRoot": "/Users/adrianmoriconi/Documents/GitHub/unleashed-shopify-sync-v2/.wrangler/tmp/deploy-kdvAlV",
  "sourcesContent": ["function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .trim()\n    .replace(/\\s+/g, '-')           // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n    .replace(/^-+/, '')             // Trim - from start of text\n    .replace(/-+$/, '');            // Trim - from end of text\n}\n\nfunction validateEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (emailRegex.test(email)) {\n    return email;\n  }\n  throw new Error(`Invalid email format: ${email}`);\n}\n\nmodule.exports = {\n  slugify,\n  validateEmail\n}; ", "const { slugify, validateEmail } = require('./helpers');\n\nasync function mapCustomers(unleashedCustomers, shopifyCustomers) {\n  const results = {\n    toCreate: [],\n    toUpdate: [],\n    processed: 0,\n    errors: []\n  };\n\n  try {\n    for (const unleashedCustomer of unleashedCustomers) {\n      try {\n        // Extract primary matching fields\n        const email = unleashedCustomer.Email || `${unleashedCustomer.CustomerCode}@placeholder.com`;\n        const firstName = unleashedCustomer.ContactFirstName || unleashedCustomer.CustomerName.split(' ')[0];\n        const lastName = unleashedCustomer.ContactLastName || unleashedCustomer.CustomerName.split(' ').slice(1).join(' ');\n\n        // Find matching Shopify customer\n        const matchingCustomer = shopifyCustomers.find(sc => \n          sc.email.toLowerCase() === email.toLowerCase() ||\n          (sc.firstName + ' ' + sc.lastName).toLowerCase() === (firstName + ' ' + lastName).toLowerCase() ||\n          sc.metafields?.find(m => m.key === 'unleashed_customer_code' && m.value === unleashedCustomer.CustomerCode)\n        );\n\n        // Prepare customer data\n        const customerData = {\n          firstName,\n          lastName,\n          email: validateEmail(email),\n          phone: unleashedCustomer.PhoneNumber || unleashedCustomer.MobileNumber,\n          metafields: [\n            {\n              namespace: 'unleashed',\n              key: 'unleashed_customer_code',\n              value: unleashedCustomer.CustomerCode\n            },\n            {\n              namespace: 'unleashed',\n              key: 'unleashed_customer_name',\n              value: unleashedCustomer.CustomerName\n            },\n            {\n              namespace: 'unleashed',\n              key: 'unleashed_sell_price_tier',\n              value: unleashedCustomer.SellPriceTier\n            }\n          ]\n        };\n\n        if (matchingCustomer) {\n          // Update existing customer\n          customerData.id = matchingCustomer.id;\n          results.toUpdate.push(customerData);\n        } else {\n          // Create new customer\n          results.toCreate.push(customerData);\n        }\n\n        results.processed++;\n      } catch (error) {\n        results.errors.push({\n          customerCode: unleashedCustomer.CustomerCode,\n          error: error.message\n        });\n      }\n    }\n  } catch (error) {\n    throw new Error(`Customer mapping failed: ${error.message}`);\n  }\n\n  return results;\n}\n\nmodule.exports = {\n  mapCustomers\n}; ", "const COUNTRY_CODE_MAPPING = {\n  'Australia': 'AU',\n  'United States': 'US',\n  'Canada': 'CA',\n  'United Kingdom': 'GB',\n  'New Zealand': 'NZ'\n};\n\n// Province/State code mappings for major countries\nconst PROVINCE_CODE_MAPPING = {\n  // Australia\n  'New South Wales': 'NSW',\n  'Victoria': 'VIC', \n  'Queensland': 'QLD',\n  'Western Australia': 'WA',\n  'South Australia': 'SA',\n  'Tasmania': 'TAS',\n  'Northern Territory': 'NT',\n  'Australian Capital Territory': 'ACT',\n  \n  // United States\n  'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n  'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n  'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n  'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n  'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO',\n  'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',\n  'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH',\n  'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\n  'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',\n  'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',\n  \n  // Canada\n  'Alberta': 'AB', 'British Columbia': 'BC', 'Manitoba': 'MB', 'New Brunswick': 'NB',\n  'Newfoundland and Labrador': 'NL', 'Northwest Territories': 'NT', 'Nova Scotia': 'NS',\n  'Nunavut': 'NU', 'Ontario': 'ON', 'Prince Edward Island': 'PE', 'Quebec': 'QC',\n  'Saskatchewan': 'SK', 'Yukon': 'YT'\n};\n\nasync function mapLocations(unleashedWarehouses, shopifyLocations) {\n  console.log('\uD83D\uDDFA\uFE0F === STARTING LOCATION MAPPING ===');\n  console.log(`\uD83D\uDCCA Input data: ${unleashedWarehouses.length} Unleashed warehouses, ${shopifyLocations.length} Shopify locations`);\n\n  const results = {\n    toCreate: [],\n    toUpdate: [],\n    processed: 0,\n    errors: [],\n    mappingDetails: {\n      unleashedWarehouses: unleashedWarehouses.length,\n      shopifyLocations: shopifyLocations.length,\n      countryMappings: {},\n      provinceMappings: {},\n      matchingLogic: []\n    }\n  };\n\n  // Log all existing Shopify locations for reference\n  console.log('\uD83D\uDCCD Existing Shopify locations:');\n  shopifyLocations.forEach((loc, index) => {\n    console.log(`   ${index + 1}. \"${loc.name}\" (ID: ${loc.id})`);\n  });\n\n  try {\n    console.log('\\n\uD83D\uDD04 Processing Unleashed warehouses...');\n    \n    for (const warehouse of unleashedWarehouses) {\n      try {\n        console.log(`\\n\uD83D\uDCE6 Processing warehouse: ${warehouse.WarehouseCode}`);\n        console.log(`   Original data:`, {\n          WarehouseCode: warehouse.WarehouseCode,\n          WarehouseName: warehouse.WarehouseName,\n          AddressLine1: warehouse.AddressLine1,\n          AddressLine2: warehouse.AddressLine2,\n          City: warehouse.City,\n          Region: warehouse.Region,\n          Country: warehouse.Country,\n          PostCode: warehouse.PostCode,\n          PhoneNumber: warehouse.PhoneNumber\n        });\n\n        // Generate location name (no longer including warehouse code)\n        const locationName = warehouse.WarehouseName;\n        console.log(`   \uD83C\uDFF7\uFE0F Generated location name: \"${locationName}\"`);\n\n        // Map country code if present\n        let mappedCountryCode = null;\n        if (warehouse.Country) {\n            mappedCountryCode = COUNTRY_CODE_MAPPING[warehouse.Country] || warehouse.Country;\n            console.log(`   \uD83C\uDF0D Country mapped: \"${warehouse.Country}\" \u2192 \"${mappedCountryCode}\"`);\n        } else {\n            console.log(`   \uD83C\uDF0D Country unchanged: \"null\"`);\n        }\n\n        // Map province/state code if present\n        let mappedProvinceCode = warehouse.Region;\n        console.log(`   \uD83C\uDFDB\uFE0F Province unchanged: \"${mappedProvinceCode}\"`);\n\n        console.log(`   \uD83D\uDD0D Searching for matching Shopify location with name: \"${locationName}\"`);\n\n        const matchingLocation = shopifyLocations.find(loc => \n          loc.name === locationName\n        );\n\n        let matchResult = {\n          warehouseCode: warehouse.WarehouseCode,\n          generatedName: locationName,\n          matchFound: !!matchingLocation,\n          action: null\n        };\n\n        // Prepare location data\n        const locationData = {\n          name: locationName,\n          address1: warehouse.AddressLine1 || 'Not specified',\n          address2: warehouse.AddressLine2 || '',\n          city: warehouse.City || 'Not specified',\n          provinceCode: mappedProvinceCode,\n          countryCode: mappedCountryCode,\n          zip: warehouse.PostCode || '00000',\n          phone: warehouse.PhoneNumber || '',\n          warehouseCode: warehouse.WarehouseCode // For metafields\n        };\n\n        console.log(`   \uD83D\uDCCB Prepared location data:`, locationData);\n\n        if (matchingLocation) {\n          // Update existing location\n          console.log(`   \u2705 Match found! Existing location ID: ${matchingLocation.id}`);\n          console.log(`   \uD83D\uDD04 Will UPDATE existing location`);\n          \n          // Ensure location ID has the proper Shopify format\n          const locationId = matchingLocation.id.startsWith('gid://') \n            ? matchingLocation.id \n            : `gid://shopify/Location/${matchingLocation.id}`;\n          \n          locationData.id = locationId;\n          results.toUpdate.push(locationData);\n          matchResult.action = 'update';\n          matchResult.existingLocationId = locationId;\n          \n          // Log the differences for updates\n          console.log(`   \uD83D\uDCDD Comparing current vs new data:`);\n          console.log(`      Name: \"${matchingLocation.name}\" (unchanged)`);\n          if (matchingLocation.address) {\n            console.log(`      Address1: \"${matchingLocation.address.address1 || 'N/A'}\" \u2192 \"${locationData.address1}\"`);\n            console.log(`      City: \"${matchingLocation.address.city || 'N/A'}\" \u2192 \"${locationData.city}\"`);\n            console.log(`      Province: \"${matchingLocation.address.provinceCode || 'N/A'}\" \u2192 \"${locationData.provinceCode}\"`);\n            console.log(`      Country: \"${matchingLocation.address.countryCode || 'N/A'}\" \u2192 \"${locationData.countryCode}\"`);\n            console.log(`      Zip: \"${matchingLocation.address.zip || 'N/A'}\" \u2192 \"${locationData.zip}\"`);\n            console.log(`      Phone: \"${matchingLocation.address.phone || 'N/A'}\" \u2192 \"${locationData.phone}\"`);\n          }\n        } else {\n          // Create new location\n          console.log(`   \u274C No match found for \"${locationName}\"`);\n          console.log(`   \uD83C\uDD95 Will CREATE new location`);\n          \n          results.toCreate.push(locationData);\n          matchResult.action = 'create';\n        }\n\n        results.mappingDetails.matchingLogic.push(matchResult);\n        results.processed++;\n        \n        console.log(`   \u2705 Warehouse \"${warehouse.WarehouseCode}\" processed successfully`);\n        \n      } catch (error) {\n        console.error(`   \u274C Error processing warehouse \"${warehouse.WarehouseCode}\":`, error.message);\n        results.errors.push({\n          warehouseCode: warehouse.WarehouseCode,\n          error: error.message\n        });\n      }\n    }\n\n    // Final summary logging\n    console.log('\\n\uD83C\uDFAF === LOCATION MAPPING SUMMARY ===');\n    console.log(`\uD83D\uDCCA Total processed: ${results.processed}/${unleashedWarehouses.length}`);\n    console.log(`\uD83C\uDD95 Locations to create: ${results.toCreate.length}`);\n    console.log(`\uD83D\uDD04 Locations to update: ${results.toUpdate.length}`);\n    console.log(`\u274C Errors encountered: ${results.errors.length}`);\n\n    if (results.toCreate.length > 0) {\n      console.log('\\n\uD83C\uDD95 NEW LOCATIONS TO CREATE:');\n      results.toCreate.forEach((loc, index) => {\n        console.log(`   ${index + 1}. \"${loc.name}\" at ${loc.address1}, ${loc.city}, ${loc.provinceCode}, ${loc.countryCode}`);\n      });\n    }\n\n    if (results.toUpdate.length > 0) {\n      console.log('\\n\uD83D\uDD04 EXISTING LOCATIONS TO UPDATE:');\n      results.toUpdate.forEach((loc, index) => {\n        console.log(`   ${index + 1}. \"${loc.name}\" (ID: ${loc.id}) at ${loc.address1}, ${loc.city}, ${loc.provinceCode}, ${loc.countryCode}`);\n      });\n    }\n\n    if (results.errors.length > 0) {\n      console.log('\\n\u274C ERRORS ENCOUNTERED:');\n      results.errors.forEach((error, index) => {\n        console.log(`   ${index + 1}. Warehouse \"${error.warehouseCode}\": ${error.error}`);\n      });\n    }\n\n    // Log country mappings used\n    const countryMappingsUsed = Object.keys(results.mappingDetails.countryMappings);\n    if (countryMappingsUsed.length > 0) {\n      console.log('\\n\uD83C\uDF0D COUNTRY MAPPINGS APPLIED:');\n      countryMappingsUsed.forEach(original => {\n        console.log(`   \"${original}\" \u2192 \"${results.mappingDetails.countryMappings[original]}\"`);\n      });\n    }\n\n    // Log province mappings used\n    const provinceMappingsUsed = Object.keys(results.mappingDetails.provinceMappings);\n    if (provinceMappingsUsed.length > 0) {\n      console.log('\\n\uD83C\uDFDB\uFE0F PROVINCE/STATE MAPPINGS APPLIED:');\n      provinceMappingsUsed.forEach(original => {\n        console.log(`   \"${original}\" \u2192 \"${results.mappingDetails.provinceMappings[original]}\"`);\n      });\n    }\n\n  } catch (error) {\n    console.error('\uD83D\uDEA8 Critical error in location mapping:', error);\n    throw new Error(`Location mapping failed: ${error.message}`);\n  }\n\n  console.log('\uD83D\uDDFA\uFE0F === LOCATION MAPPING COMPLETE ===\\n');\n  return results;\n}\n\nmodule.exports = {\n  mapLocations,\n  COUNTRY_CODE_MAPPING,\n  PROVINCE_CODE_MAPPING\n}; ", "const { slugify } = require('./helpers');\n\nfunction generateVariantTitle(options) {\n  if (!options || !options.length) return 'Default Title';\n  return options.map(opt => opt.value).join(' / ');\n}\n\nfunction groupUnleashedProducts(products) {\n  const groups = new Map();\n  let filteredCount = 0;\n  const filterReasons = {\n    isComponent: 0,\n    notSellable: 0,\n    both: 0\n  };\n  \n  console.log(`Processing ${products.length} Unleashed products...`);\n  \n  for (const product of products) {\n    // Skip products that shouldn't be synced\n    const isComponent = product.IsComponent;\n    const isNotSellable = !product.IsSellable;\n    \n    if (isComponent || isNotSellable) {\n      filteredCount++;\n      if (isComponent && isNotSellable) {\n        filterReasons.both++;\n        console.log(`Filtered: ${product.ProductCode} - ${product.ProductDescription} (Component & Not Sellable)`);\n      } else if (isComponent) {\n        filterReasons.isComponent++;\n        console.log(`Filtered: ${product.ProductCode} - ${product.ProductDescription} (Component)`);\n      } else if (isNotSellable) {\n        filterReasons.notSellable++;\n        console.log(`Filtered: ${product.ProductCode} - ${product.ProductDescription} (Not Sellable)`);\n      }\n      continue;\n    }\n\n    const groupKey = product.AttributeSet?.ProductTitle || product.ProductDescription;\n    if (!groups.has(groupKey)) {\n      groups.set(groupKey, []);\n    }\n    groups.get(groupKey).push(product);\n  }\n\n  console.log(`Product filtering summary:`);\n  console.log(`- Total products: ${products.length}`);\n  console.log(`- Filtered out: ${filteredCount}`);\n  console.log(`  - Components: ${filterReasons.isComponent}`);\n  console.log(`  - Not sellable: ${filterReasons.notSellable}`);\n  console.log(`  - Both: ${filterReasons.both}`);\n  console.log(`- Remaining for sync: ${products.length - filteredCount}`);\n  console.log(`- Product groups created: ${groups.size}`);\n\n  return Array.from(groups.values());\n}\n\nasync function mapProducts(unleashedProducts, shopifyProducts) {\n  const results = {\n    toCreate: [],\n    toUpdate: [],\n    toArchive: [],\n    processed: 0,\n    errors: []\n  };\n\n  try {\n    // Group Unleashed products by AttributeSet.ProductTitle\n    const productGroups = groupUnleashedProducts(unleashedProducts);\n\n    // Process each group (or single product)\n    for (const group of productGroups) {\n      try {\n        const mainProduct = group[0];\n        const isMultiVariant = group.length > 1;\n\n        // Generate handle based on grouping strategy\n        const productTitle = isMultiVariant \n          ? mainProduct.AttributeSet.ProductTitle \n          : mainProduct.ProductDescription;\n        const handle = slugify(productTitle);\n\n        // Find matching Shopify product\n        const matchingProduct = shopifyProducts.find(sp => sp.handle === handle);\n\n        // Prepare product data\n        const productData = {\n          handle,\n          title: productTitle,\n          description: mainProduct.ProductDescription,\n          product_type: mainProduct.ProductGroup?.GroupName || '',\n          vendor: mainProduct.ProductBrand?.BrandName || 'Default',\n          status: mainProduct.Obsolete ? 'ARCHIVED' : 'ACTIVE',\n          tags: [\n            mainProduct.ProductSubGroup?.GroupName,\n            mainProduct.ProductGroup?.GroupName\n          ].filter(Boolean),\n          images: [{\n            src: mainProduct.ImageUrl || (mainProduct.Images && mainProduct.Images[0]?.Url)\n          }].filter(img => img.src),\n          variants: group.map(product => ({\n            sku: product.ProductCode,\n            title: isMultiVariant \n              ? generateVariantTitle(product.AttributeSet?.Options)\n              : 'Default Title',\n            price: product.DefaultSellPrice,\n            compare_at_price: null,\n            weight: product.Weight || 0,\n            weight_unit: 'g',\n            inventory_management: (!product.NeverDiminishing && product.IsSellable) ? 'shopify' : null,\n            inventory_policy: 'deny',\n            option1: product.AttributeSet?.Options?.[0]?.value,\n            option2: product.AttributeSet?.Options?.[1]?.value,\n            option3: product.AttributeSet?.Options?.[2]?.value,\n            metafields: Array.from({ length: 10 }, (_, i) => ({\n              namespace: 'custom',\n              key: `price_tier_${i + 1}`,\n              value: product[`SellPriceTier${i + 1}`]?.Value || ''\n            }))\n          })),\n          options: isMultiVariant ? \n            Array.from(new Set(group.flatMap(p => \n              p.AttributeSet?.Options?.map(o => o.name) || []\n            ))).slice(0, 3).map(name => ({ name })) : \n            [{ name: 'Title' }]\n        };\n\n        if (matchingProduct) {\n          // Verify SKU connection\n          const skusMatch = isMultiVariant\n            ? group.some(p => matchingProduct.variants.some(v => v.sku === p.ProductCode))\n            : matchingProduct.variants[0]?.sku === mainProduct.ProductCode;\n\n          if (skusMatch) {\n            // Update existing product\n            productData.id = matchingProduct.id;\n            productData.variants = productData.variants.map(v => {\n              const matchingVariant = matchingProduct.variants.find(mv => mv.sku === v.sku);\n              if (matchingVariant) v.id = matchingVariant.id;\n              return v;\n            });\n            results.toUpdate.push(productData);\n          } else {\n            // Create new product with modified handle\n            productData.handle = `${handle}-${mainProduct.ProductCode}`;\n            results.toCreate.push(productData);\n          }\n        } else {\n          // Create new product\n          results.toCreate.push(productData);\n        }\n\n        results.processed++;\n      } catch (error) {\n        results.errors.push({\n          productCode: group[0].ProductCode,\n          error: error.message\n        });\n      }\n    }\n\n    // Find Shopify products to archive (products in Shopify but not in Unleashed)\n    const unleashedHandles = new Set(productGroups.map(group => \n      slugify(group[0].AttributeSet?.ProductTitle || group[0].ProductDescription)\n    ));\n    \n    const productsToArchive = shopifyProducts\n      .filter(sp => !sp.status.includes('ARCHIVED') && !unleashedHandles.has(sp.handle))\n      .map(sp => ({\n        id: sp.id,\n        status: 'ARCHIVED'\n      }));\n\n    results.toArchive.push(...productsToArchive);\n\n  } catch (error) {\n    throw new Error(`Product mapping failed: ${error.message}`);\n  }\n\n  return results;\n}\n\nmodule.exports = {\n  mapProducts,\n  generateVariantTitle,\n  groupUnleashedProducts\n}; ", "// src/data_pull.js\n\n// Helper function to get auth data from KV store\nasync function getAuthData(kvStore, domain) {\n  try {\n    const authString = await kvStore.get(domain);\n    if (!authString) {\n      throw new Error(`No authentication data found for domain: ${domain}`);\n    }\n    return JSON.parse(authString);\n  } catch (error) {\n    console.error('Error getting auth data:', error);\n    throw new Error(`Failed to get authentication data: ${error.message}`);\n  }\n}\n\n// Helper: Generate HMAC-SHA256 signature for Unleashed API authentication\nasync function generateUnleashedSignature(queryString, apiKey) {\n  const encoder = new TextEncoder();\n  const keyBuffer = encoder.encode(apiKey);\n  const dataBuffer = encoder.encode(queryString);\n  const cryptoKey = await crypto.subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  );\n  const signature = await crypto.subtle.sign('HMAC', cryptoKey, dataBuffer);\n  const base64Signature = btoa(String.fromCharCode(...new Uint8Array(signature)));\n  return base64Signature;\n}\n\n// Helper: Create headers for Unleashed API requests\nasync function createUnleashedHeaders(endpoint, apiKey, apiId) {\n  const url = new URL(endpoint);\n  const queryString = url.search ? url.search.substring(1) : '';\n  const signature = await generateUnleashedSignature(queryString, apiKey);\n  return {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'api-auth-id': apiId,\n    'api-auth-signature': signature,\n    'Client-Type': 'kilr/unleashedshopify'\n  };\n}\n\n// Fetch Unleashed data\nasync function fetchUnleashedData(authData) {\n  const results = {};\n  \n  // Products\n  const productsUrl = 'https://api.unleashedsoftware.com/Products?pageSize=200&pageNumber=1';\n  const productsResponse = await fetch(productsUrl, {\n    method: 'GET',\n    headers: await createUnleashedHeaders(productsUrl, authData.apiKey, authData.apiId)\n  });\n  const productsData = await productsResponse.json();\n  results.products = productsData.Items || [];\n\n  // Customers\n  const customersUrl = 'https://api.unleashedsoftware.com/Customers?pageSize=200&pageNumber=1';\n  const customersResponse = await fetch(customersUrl, {\n    method: 'GET',\n    headers: await createUnleashedHeaders(customersUrl, authData.apiKey, authData.apiId)\n  });\n  const customersData = await customersResponse.json();\n  results.customers = customersData.Items || [];\n\n  // Warehouses\n  const warehousesUrl = 'https://api.unleashedsoftware.com/Warehouses';\n  const warehousesResponse = await fetch(warehousesUrl, {\n    method: 'GET',\n    headers: await createUnleashedHeaders(warehousesUrl, authData.apiKey, authData.apiId)\n  });\n  const warehousesData = await warehousesResponse.json();\n  results.warehouses = warehousesData.Items || [];\n\n  return results;\n}\n\n// Fetch Shopify data\nasync function fetchShopifyProducts(baseUrl, headers) {\n  const allProducts = [];\n  let hasNextPage = true;\n  let cursor = null;\n  const query = `\n    query GetProducts($first: Int!, $after: String) {\n      products(first: $first, after: $after) {\n        edges {\n          node {\n            id\n            title\n            tracksInventory\n            totalInventory\n            featuredImage {\n              id\n              url\n              altText\n              width\n              height\n            }\n            variants(first: 20) {\n              edges {\n                node {\n                  inventoryItem {\n                    tracked\n                    inventoryLevels(first: 5) {\n                      nodes {\n                        quantities(names: \"available\") {\n                          quantity\n                        }\n                        location {\n                          name\n                        }\n                      }\n                    }\n                    sku\n                  }\n                  displayName\n                  id\n                  image {\n                    id\n                    url\n                    altText\n                    width\n                    height\n                  }\n                  price\n                  metafields(first: 3, keys: [\"custom.price_tier_1\", \"custom.price_tier_2\", \"custom.price_tier_3\"]) {\n                    edges {\n                      node {\n                        key\n                        value\n                      }\n                    }\n                  }\n                  title\n                  sku\n                }\n              }\n            }\n            description\n            productType\n            status\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  `;\n  while (hasNextPage) {\n    const variables = { first: 25, after: cursor };\n    const response = await fetch(`${baseUrl}/graphql.json`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({ query, variables })\n    });\n    const data = await response.json();\n    if (data.errors) throw new Error(`Shopify GraphQL errors: ${JSON.stringify(data.errors)}`);\n    const products = data.data.products.edges.map(edge => edge.node);\n    allProducts.push(...products);\n    hasNextPage = data.data.products.pageInfo.hasNextPage;\n    cursor = data.data.products.pageInfo.endCursor;\n  }\n  return allProducts;\n}\n\nasync function fetchShopifyCustomers(baseUrl, headers) {\n  const allCustomers = [];\n  let hasNextPage = true;\n  let cursor = null;\n  const query = `\n    query GetCustomers($first: Int!, $after: String) {\n      customers(first: $first, after: $after) {\n        edges {\n          node {\n            id\n            firstName\n            lastName\n            email\n            phone\n            metafields(\n              keys: [\"unleashed.unleashed_customer_code\", \"unleashed.unleashed_customer_name\", \"unleashed.unleashed_sell_price_tier\"]\n              first: 10\n            ) {\n              edges {\n                node {\n                  id\n                  key\n                  value\n                  namespace\n                }\n              }\n            }\n          }\n          cursor\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  `;\n  while (hasNextPage) {\n    const variables = { first: 25, after: cursor };\n    const response = await fetch(`${baseUrl}/graphql.json`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({ query, variables })\n    });\n    const data = await response.json();\n    if (data.errors) throw new Error(`Shopify Customers GraphQL errors: ${JSON.stringify(data.errors)}`);\n    const customers = data.data.customers.edges.map(edge => edge.node);\n    allCustomers.push(...customers);\n    hasNextPage = data.data.customers.pageInfo.hasNextPage;\n    cursor = data.data.customers.pageInfo.endCursor;\n  }\n  return allCustomers;\n}\n\nasync function fetchShopifyLocations(baseUrl, headers) {\n  const response = await fetch(`${baseUrl}/locations.json`, { headers });\n  const data = await response.json();\n  return data.locations;\n}\n\nasync function fetchShopifyData(auth) {\n  const { accessToken, shopDomain } = auth;\n  const baseUrl = `https://${shopDomain}/admin/api/2025-04`;\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Shopify-Access-Token': accessToken\n  };\n  const [products, customers, locations] = await Promise.all([\n    fetchShopifyProducts(baseUrl, headers),\n    fetchShopifyCustomers(baseUrl, headers),\n    fetchShopifyLocations(baseUrl, headers)\n  ]);\n  return { products, customers, locations };\n}\n\n// Main exported function\nasync function pullAllData(domain, env) {\n  if (!env.AUTH_STORE) {\n    throw new Error('KV binding AUTH_STORE not found');\n  }\n\n  // Get authentication data from KV store\n  const authData = await getAuthData(env.AUTH_STORE, domain);\n  \n  if (!authData || !authData.unleashed || !authData.shopify) {\n    throw new Error('Invalid authentication data structure');\n  }\n\n  // Fetch data from both systems\n  const [unleashedData, shopifyData] = await Promise.all([\n    fetchUnleashedData(authData.unleashed),\n    fetchShopifyData(authData.shopify)\n  ]);\n\n  return {\n    unleashed: unleashedData,\n    shopify: shopifyData\n  };\n}\n\nexport { pullAllData }; ", "/**\n * Unleashed-Shopify Sync Worker V2\n * Handles initial data fetching and processing\n */\n\nimport { pullAllData } from './data_pull.js';\nimport { mapCustomers } from './customer-mapping.js';\nimport { mapLocations } from './location-mapping.js';\nimport { mapProducts } from './product-mapping.js';\nimport { handleLocationMutations, handleLocationSync } from './location-mutation-handler.js';\n\n// CORS headers for all responses\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept, Accept-Encoding, Accept-Language, Content-Length, Origin, Referer, User-Agent, X-Forwarded-Proto',\n  'Access-Control-Max-Age': '86400', // 24 hours cache for preflight\n};\n\n// Helper function to create JSON responses\nfunction jsonResponse(data, status = 200) {\n  return new Response(JSON.stringify(data, null, 2), {\n    status,\n    headers: {\n      ...corsHeaders,\n      'Content-Type': 'application/json',\n    },\n  });\n}\n\n// Helper function to get auth data from KV store\nasync function getAuthData(env, domain) {\n  if (!env.AUTH_STORE) {\n    throw new Error('KV binding AUTH_STORE not found');\n  }\n  \n  try {\n    const authString = await env.AUTH_STORE.get(domain);\n    if (!authString) {\n      throw new Error(`No authentication data found for domain: ${domain}`);\n    }\n    return JSON.parse(authString);\n  } catch (error) {\n    console.error('Error getting auth data:', error);\n    throw new Error(`Failed to get authentication data: ${error.message}`);\n  }\n}\n\n// Serve the updated client script\nfunction serveClientScript() {\n  const clientScript = `!function(e,t){\"use strict\";\n    // Configuration object\n    const config = {\n        workerUrl: \"https://unleashed-shopify-sync-v2.adrian-b0e.workers.dev/api/v2/data-fetch\",\n        mutationUrl: \"https://unleashed-shopify-sync-v2.adrian-b0e.workers.dev/api/v2/mutate-locations\",\n        syncUrl: \"https://unleashed-shopify-sync-v2.adrian-b0e.workers.dev/api/v2/sync-locations\",\n        buttonAttribute: \"kilr-unleashed-sync\",\n        mutateButtonAttribute: \"kilr-unleashed-mutate-locations\",\n        syncButtonAttribute: \"kilr-unleashed-sync-locations\",\n        loadingClass: \"kilr-sync-loading\",\n        successClass: \"kilr-sync-success\",\n        errorClass: \"kilr-sync-error\"\n    };\n\n    // Create and append styles\n    const styleElement = t.createElement(\"style\");\n    styleElement.textContent = \\`\n        .\\${config.loadingClass} {\n            opacity: 0.7;\n            cursor: not-allowed;\n            position: relative;\n        }\n        .\\${config.loadingClass}::after {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            top: 50%;\n            right: 10px;\n            transform: translateY(-50%);\n            border: 2px solid #fff;\n            border-radius: 50%;\n            border-top-color: transparent;\n            animation: kilr-spin 1s linear infinite;\n        }\n        .\\${config.successClass} {\n            background-color: #4CAF50 !important;\n            border-color: #45a049 !important;\n        }\n        .\\${config.errorClass} {\n            background-color: #f44336 !important;\n            border-color: #da190b !important;\n        }\n        @keyframes kilr-spin {\n            to { transform: translateY(-50%) rotate(360deg); }\n        }\n        @keyframes kilr-notification {\n            from { opacity: 0; transform: translateX(100%); }\n            to { opacity: 1; transform: translateX(0); }\n        }\n        @keyframes kilr-notification-out {\n            from { opacity: 1; transform: translateX(0); }\n            to { opacity: 0; transform: translateX(100%); }\n        }\n    \\`;\n    t.head.appendChild(styleElement);\n\n    // Show notification\n    function showNotification(message, type) {\n        console.log('Showing notification:', message, type);\n        \n        if (e.shopify && e.shopify.toast) {\n            e.shopify.toast.show(message);\n            return;\n        }\n\n        const notification = t.createElement(\"div\");\n        notification.style.cssText = \\`\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 16px 24px;\n            background: \\${type === \"error\" ? \"#f44336\" : type === \"success\" ? \"#4CAF50\" : \"#2196F3\"};\n            color: white;\n            border-radius: 4px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n            z-index: 10000;\n            animation: kilr-notification 0.3s ease-out;\n        \\`;\n        notification.textContent = message;\n        t.body.appendChild(notification);\n\n        setTimeout(() => {\n            notification.style.animation = \"kilr-notification-out 0.3s ease-in forwards\";\n            setTimeout(() => notification.remove(), 300);\n        }, 5000);\n    }\n\n    // Update button state\n    function updateButtonState(button, state) {\n        console.log('Updating button state:', state);\n        \n        button.classList.remove(config.loadingClass, config.successClass, config.errorClass);\n        const originalText = button.getAttribute(\"data-original-text\");\n\n        switch (state) {\n            case \"loading\":\n                if (!originalText) {\n                    button.setAttribute(\"data-original-text\", button.textContent);\n                }\n                button.classList.add(config.loadingClass);\n                button.textContent = \"Processing...\";\n                break;\n            case \"success\":\n                button.classList.add(config.successClass);\n                button.textContent = \"Complete\";\n                setTimeout(() => {\n                    button.classList.remove(config.successClass);\n                    button.textContent = originalText;\n                }, 2000);\n                break;\n            case \"error\":\n                button.classList.add(config.errorClass);\n                button.textContent = \"Failed\";\n                setTimeout(() => {\n                    button.classList.remove(config.errorClass);\n                    button.textContent = originalText;\n                }, 2000);\n                break;\n        }\n    }\n\n    // Handle sync (complete workflow - mapping + mutations)\n    function handleSync(event) {\n        event.preventDefault();\n        const button = event.currentTarget;\n        console.log('Handle sync called for button:', button);\n        \n        if (button.classList.contains(config.loadingClass)) {\n            console.log('Button is already in loading state, ignoring click');\n            return;\n        }\n\n        // Get the current domain\n        const domain = window.location.hostname;\n        console.log('Current domain:', domain);\n\n        // Prepare the request data\n        const requestData = { domain };\n        console.log('Request data:', requestData);\n\n        // Update button state\n        updateButtonState(button, \"loading\");\n\n        // Make the request to the complete sync endpoint\n        fetch(config.syncUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(requestData)\n        })\n        .then(response => {\n            console.log('Response received:', response);\n            return response.json().then(data => {\n                if (!response.ok) {\n                    throw new Error(data.error || 'Sync failed');\n                }\n                return data;\n            });\n        })\n        .then(data => {\n            console.log('Data received:', data);\n            if (data.success) {\n                // Handle sync response (includes both mapping and mutation results)\n                const mapping = data.mappingResults;\n                const mutations = data.mutationResults;\n                \n                showNotification(\n                    \\`Sync complete! Locations: \\${mutations.successCount} processed, \\${mutations.errors.length} errors\\`,\n                    mutations.errors.length > 0 ? \"error\" : \"success\"\n                );\n                updateButtonState(button, mutations.errors.length > 0 ? \"error\" : \"success\");\n\n                // Log the complete sync results\n                if (data.mappingResults && data.mutationResults) {\n                    logSyncResults(data);\n                }\n            } else {\n                throw new Error(data.error || 'Sync failed');\n            }\n        })\n        .catch(error => {\n            console.error('Sync error:', error);\n            showNotification(error.message || \"Failed to sync data\", \"error\");\n            updateButtonState(button, \"error\");\n        });\n    }\n\n    // Initialize the script\n    if (typeof e !== \"undefined\" && typeof t !== \"undefined\") {\n        if (t.readyState === \"loading\") {\n            t.addEventListener(\"DOMContentLoaded\", init);\n        } else {\n            init();\n        }\n    }\n\n    function init() {\n        console.log('Initializing Unleashed Sync script...');\n        initializeButtons();\n    }\n\n    function initializeButtons() {\n        console.log('Initializing sync buttons...');\n        \n        // Find all sync buttons\n        const syncButtons = t.querySelectorAll(\\`[\\${config.buttonAttribute}]\\`);\n        console.log(\\`Found \\${syncButtons.length} sync buttons\\`);\n        \n        syncButtons.forEach(button => {\n            console.log('Attaching event listener to sync button:', button);\n            button.addEventListener('click', handleSync);\n        });\n    }\n}(window, document);`;\n\n  return new Response(clientScript, {\n    headers: {\n      ...corsHeaders,\n      'Content-Type': 'application/javascript',\n      'Cache-Control': 'no-cache', // Prevent caching to ensure updates are immediate\n    },\n  });\n}\n\nasync function handleDataFetch(request, env) {\n  try {\n    // Get domain from request\n    let domain = null;\n    \n    try {\n      const rawBody = await request.text();\n      if (!rawBody) {\n        return jsonResponse({ \n          error: 'Empty request body',\n          details: 'Request body is required and must contain a domain.'\n        }, 400);\n      }\n      \n      const requestBody = JSON.parse(rawBody);\n      domain = requestBody.domain;\n      \n      if (!domain) {\n        return jsonResponse({ \n          error: 'Domain is required',\n          details: 'The request body must contain a domain field.'\n        }, 400);\n      }\n    } catch (error) {\n      return jsonResponse({ \n        error: 'Invalid request body',\n        details: error.message\n      }, 400);\n    }\n\n    // Clean the domain (remove protocol and path)\n    domain = domain.replace(/^https?:\\/\\//, '').split('/')[0];\n\n    console.log(`Starting data sync for domain: ${domain}`);\n\n    // Pull data from both systems using data_pull.js\n    const data = await pullAllData(domain, env);\n    \n    console.log('Data pulled successfully:', {\n      unleashed: {\n        products: data.unleashed.products.length,\n        customers: data.unleashed.customers.length,\n        warehouses: data.unleashed.warehouses.length\n      },\n      shopify: {\n        products: data.shopify.products.length,\n        customers: data.shopify.customers.length,\n        locations: data.shopify.locations.length\n      }\n    });\n\n    // Perform mapping operations\n    console.log('Starting mapping operations...');\n    \n    const mappingResults = {};\n    \n    try {\n      // Map customers\n      console.log('Mapping customers...');\n      mappingResults.customers = await mapCustomers(data.unleashed.customers, data.shopify.customers);\n      console.log('Customer mapping complete:', {\n        toCreate: mappingResults.customers.toCreate.length,\n        toUpdate: mappingResults.customers.toUpdate.length,\n        errors: mappingResults.customers.errors.length,\n        processed: mappingResults.customers.processed\n      });\n    } catch (error) {\n      console.error('Customer mapping failed:', error);\n      mappingResults.customers = { error: error.message };\n    }\n\n    try {\n      // Map locations\n      console.log('Mapping locations...');\n      mappingResults.locations = await mapLocations(data.unleashed.warehouses, data.shopify.locations);\n      console.log('Location mapping complete:', {\n        toCreate: mappingResults.locations.toCreate.length,\n        toUpdate: mappingResults.locations.toUpdate.length,\n        errors: mappingResults.locations.errors.length,\n        processed: mappingResults.locations.processed\n      });\n    } catch (error) {\n      console.error('Location mapping failed:', error);\n      mappingResults.locations = { error: error.message };\n    }\n\n    try {\n      // Map products\n      console.log('Mapping products...');\n      mappingResults.products = await mapProducts(data.unleashed.products, data.shopify.products);\n      console.log('Product mapping complete:', {\n        toCreate: mappingResults.products.toCreate.length,\n        toUpdate: mappingResults.products.toUpdate.length,\n        toArchive: mappingResults.products.toArchive.length,\n        errors: mappingResults.products.errors.length,\n        processed: mappingResults.products.processed\n      });\n    } catch (error) {\n      console.error('Product mapping failed:', error);\n      mappingResults.products = { error: error.message };\n    }\n\n    console.log('All mapping operations complete');\n\n    return jsonResponse({\n      success: true,\n      domain,\n      data,\n      mappingResults,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Worker error:', error);\n    return jsonResponse({ \n      error: error.message || 'Internal server error',\n      details: error.stack \n    }, 500);\n  }\n}\n\nexport default {\n  async fetch(request, env, ctx) {\n    // Handle CORS preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 204,\n        headers: corsHeaders\n      });\n    }\n\n    const url = new URL(request.url);\n    \n    // Route requests\n    if (url.pathname === '/api/v2/data-fetch' && request.method === 'POST') {\n      // Redirect data-fetch to sync-locations for backward compatibility\n      return handleLocationSync(request, env);\n    }\n    \n    if (url.pathname === '/api/v2/mutate-locations' && request.method === 'POST') {\n      return handleLocationMutations(request, env);\n    }\n    \n    if (url.pathname === '/api/v2/sync-locations' && request.method === 'POST') {\n      return handleLocationSync(request, env);\n    }\n    \n    // Serve client script\n    if (url.pathname === '/client-script.js' && request.method === 'GET') {\n      return serveClientScript();\n    }\n\n    return new Response('Not Found', { status: 404 });\n  },\n}; ", "/**\n * Location Mutation Handler\n * Handles the complete location mutation workflow including data fetching, mapping, and mutations\n */\n\nimport { pullAllData } from './data_pull.js';\nimport { mapLocations } from './location-mapping.js';\nimport { mutateLocations } from './location-mutations.js';\n\n// Helper function to get auth data from KV store\nasync function getAuthData(env, domain) {\n  if (!env.AUTH_STORE) {\n    throw new Error('KV binding AUTH_STORE not found');\n  }\n  \n  try {\n    const authString = await env.AUTH_STORE.get(domain);\n    if (!authString) {\n      throw new Error(`No authentication data found for domain: ${domain}`);\n    }\n    return JSON.parse(authString);\n  } catch (error) {\n    console.error('Error getting auth data:', error);\n    throw new Error(`Failed to get authentication data: ${error.message}`);\n  }\n}\n\n// Helper function to create JSON responses\nfunction jsonResponse(data, status = 200) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept, Accept-Encoding, Accept-Language, Content-Length, Origin, Referer, User-Agent, X-Forwarded-Proto',\n    'Access-Control-Max-Age': '86400', // 24 hours cache for preflight\n  };\n\n  return new Response(JSON.stringify(data, null, 2), {\n    status,\n    headers: {\n      ...corsHeaders,\n      'Content-Type': 'application/json',\n    },\n  });\n}\n\n/**\n * Handler for location mutations only (existing endpoint)\n */\nexport async function handleLocationMutations(request, env) {\n  try {\n    // Get domain from request\n    let domain = null;\n    \n    try {\n      const rawBody = await request.text();\n      if (!rawBody) {\n        return jsonResponse({ \n          error: 'Empty request body',\n          details: 'Request body is required and must contain a domain.'\n        }, 400);\n      }\n      \n      const requestBody = JSON.parse(rawBody);\n      domain = requestBody.domain;\n      \n      if (!domain) {\n        return jsonResponse({ \n          error: 'Domain is required',\n          details: 'The request body must contain a domain field.'\n        }, 400);\n      }\n    } catch (error) {\n      return jsonResponse({ \n        error: 'Invalid request body',\n        details: error.message\n      }, 400);\n    }\n\n    // Clean the domain (remove protocol and path)\n    domain = domain.replace(/^https?:\\/\\//, '').split('/')[0];\n\n    console.log(`\uD83D\uDE80 Starting location mutations for domain: ${domain}`);\n\n    // Get authentication data from KV store\n    const authData = await getAuthData(env, domain);\n    \n    if (!authData || !authData.unleashed || !authData.shopify) {\n      throw new Error('Invalid authentication data structure');\n    }\n\n    // Pull data from both systems\n    const data = await pullAllData(domain, env);\n    \n    console.log('Data pulled successfully for mutations:', {\n      unleashed: {\n        warehouses: data.unleashed.warehouses.length\n      },\n      shopify: {\n        locations: data.shopify.locations.length\n      }\n    });\n\n    // Perform location mapping\n    console.log('\uD83D\uDDFA\uFE0F Starting location mapping for mutations...');\n    const locationMappingResults = await mapLocations(data.unleashed.warehouses, data.shopify.locations);\n    \n    // Execute location mutations\n    console.log('\uD83D\uDD04 Starting location mutations...');\n    const mutationResults = await mutateLocations(authData.shopify, locationMappingResults);\n\n    console.log('\u2705 Location mutations completed successfully');\n\n    return jsonResponse({\n      success: true,\n      domain,\n      mappingResults: {\n        toCreate: locationMappingResults.toCreate.length,\n        toUpdate: locationMappingResults.toUpdate.length,\n        errors: locationMappingResults.errors.length,\n        processed: locationMappingResults.processed\n      },\n      mutationResults: {\n        created: {\n          successful: mutationResults.created.successful.length,\n          failed: mutationResults.created.failed.length\n        },\n        updated: {\n          successful: mutationResults.updated.successful.length,\n          failed: mutationResults.updated.failed.length\n        },\n        summary: mutationResults.summary\n      },\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('\uD83D\uDEA8 Location mutation handler error:', error);\n    return jsonResponse({ \n      error: error.message || 'Internal server error',\n      details: error.stack \n    }, 500);\n  }\n}\n\n/**\n * Complete location sync workflow: Map + Mutate in one call\n */\nexport async function handleLocationSync(request, env) {\n  try {\n    // Get domain from request\n    let domain = null;\n    \n    try {\n      const rawBody = await request.text();\n      if (!rawBody) {\n        return jsonResponse({ \n          error: 'Empty request body',\n          details: 'Request body is required and must contain a domain.'\n        }, 400);\n      }\n      \n      const requestBody = JSON.parse(rawBody);\n      domain = requestBody.domain;\n      \n      if (!domain) {\n        return jsonResponse({ \n          error: 'Domain is required',\n          details: 'The request body must contain a domain field.'\n        }, 400);\n      }\n    } catch (error) {\n      return jsonResponse({ \n        error: 'Invalid request body',\n        details: error.message\n      }, 400);\n    }\n\n    // Clean the domain (remove protocol and path)\n    domain = domain.replace(/^https?:\\/\\//, '').split('/')[0];\n\n    console.log(`\uD83D\uDD04 Starting complete location sync workflow for domain: ${domain}`);\n\n    // Get authentication data from KV store\n    const authData = await getAuthData(env, domain);\n    \n    if (!authData || !authData.unleashed || !authData.shopify) {\n      throw new Error('Invalid authentication data structure');\n    }\n\n    // Step 1: Pull data from both systems\n    console.log('\uD83D\uDCCA Step 1: Fetching data from Unleashed and Shopify...');\n    const data = await pullAllData(domain, env);\n    \n    console.log('Data pulled successfully:', {\n      unleashed: {\n        warehouses: data.unleashed.warehouses.length\n      },\n      shopify: {\n        locations: data.shopify.locations.length\n      }\n    });\n\n    // Step 2: Perform location mapping\n    console.log('\uD83D\uDDFA\uFE0F Step 2: Mapping locations...');\n    const locationMappingResults = await mapLocations(data.unleashed.warehouses, data.shopify.locations);\n    \n    console.log('Mapping completed:', {\n      toCreate: locationMappingResults.toCreate.length,\n      toUpdate: locationMappingResults.toUpdate.length,\n      errors: locationMappingResults.errors.length\n    });\n\n    // Step 3: Execute mutations if there are changes to make\n    let mutationResults = null;\n    if (locationMappingResults.toCreate.length > 0 || locationMappingResults.toUpdate.length > 0) {\n      console.log('\uD83D\uDE80 Step 3: Executing location mutations...');\n      mutationResults = await mutateLocations(authData.shopify, locationMappingResults);\n      console.log('\u2705 Location mutations completed successfully');\n    } else {\n      console.log('\u23ED\uFE0F Step 3: No mutations needed - all locations are up to date');\n      mutationResults = {\n        created: { successful: [], failed: [], totalProcessed: 0 },\n        updated: { successful: [], failed: [], totalProcessed: 0 },\n        summary: {\n          totalLocationsProcessed: 0,\n          totalSuccessful: 0,\n          totalFailed: 0,\n          createdCount: 0,\n          updatedCount: 0,\n          startTime: new Date().toISOString(),\n          endTime: new Date().toISOString(),\n          duration: '0.00s'\n        }\n      };\n    }\n\n    console.log('\uD83C\uDFAF Complete location sync workflow finished successfully');\n\n    return jsonResponse({\n      success: true,\n      domain,\n      workflow: 'complete-sync',\n      mappingResults: {\n        toCreate: locationMappingResults.toCreate.length,\n        toUpdate: locationMappingResults.toUpdate.length,\n        errors: locationMappingResults.errors.length,\n        processed: locationMappingResults.processed,\n        details: locationMappingResults.mappingDetails\n      },\n      mutationResults: {\n        created: {\n          successful: mutationResults.created.successful.length,\n          failed: mutationResults.created.failed.length\n        },\n        updated: {\n          successful: mutationResults.updated.successful.length,\n          failed: mutationResults.updated.failed.length\n        },\n        summary: mutationResults.summary\n      },\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('\uD83D\uDEA8 Location sync workflow error:', error);\n    return jsonResponse({ \n      error: error.message || 'Internal server error',\n      details: error.stack \n    }, 500);\n  }\n} ", "/**\n * Shopify Location Mutations Handler\n * Efficiently creates and updates locations using GraphQL mutations with batching\n */\n\nconst MAX_BATCH_SIZE = 10; // GraphQL batch limit for location operations\nconst MUTATION_DELAY = 100; // Small delay between batches to avoid rate limits\n\n// GraphQL mutation for creating a location\nconst CREATE_LOCATION_MUTATION = `\n  mutation locationAdd($input: LocationAddInput!) {\n    locationAdd(input: $input) {\n      location {\n        id\n        name\n        address {\n          address1\n          address2\n          city\n          provinceCode\n          countryCode\n          zip\n          phone\n        }\n        fulfillsOnlineOrders\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\n\n// GraphQL mutation for updating a location\nconst UPDATE_LOCATION_MUTATION = `\n  mutation locationEdit($id: ID!, $input: LocationEditInput!) {\n    locationEdit(id: $id, input: $input) {\n      location {\n        id\n        name\n        address {\n          address1\n          address2\n          city\n          provinceCode\n          countryCode\n          zip\n          phone\n        }\n        fulfillsOnlineOrders\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * Execute a single GraphQL mutation\n */\nasync function executeMutation(baseUrl, headers, mutation, variables) {\n  try {\n    const response = await fetch(`${baseUrl}/graphql.json`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({\n        query: mutation,\n        variables\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    \n    if (result.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`);\n    }\n\n    return result.data;\n  } catch (error) {\n    console.error('Mutation execution failed:', error);\n    throw error;\n  }\n}\n\n/**\n * Create locations in batches\n */\nasync function createLocationsBatch(baseUrl, headers, locationsToCreate) {\n  const results = {\n    successful: [],\n    failed: [],\n    totalProcessed: 0\n  };\n\n  console.log(`\uD83D\uDCCD Starting creation of ${locationsToCreate.length} locations in batches of ${MAX_BATCH_SIZE}`);\n\n  // Process in batches\n  for (let i = 0; i < locationsToCreate.length; i += MAX_BATCH_SIZE) {\n    const batch = locationsToCreate.slice(i, i + MAX_BATCH_SIZE);\n    console.log(`\uD83D\uDCE6 Processing batch ${Math.floor(i / MAX_BATCH_SIZE) + 1} with ${batch.length} locations`);\n\n    // Process each location in the current batch\n    for (const locationData of batch) {\n      try {\n        console.log(`\uD83C\uDFD7\uFE0F Creating location: \"${locationData.name}\"`);\n        console.log(`   Address: ${locationData.address1}, ${locationData.city}, ${locationData.provinceCode}, ${locationData.countryCode}`);\n\n        // Prepare the location input for Shopify\n        const locationInput = {\n          name: locationData.name,\n          address: {\n            address1: locationData.address1,\n            address2: locationData.address2 || \"\",\n            city: locationData.city,\n            provinceCode: locationData.provinceCode,\n            countryCode: locationData.countryCode,\n            zip: locationData.zip,\n            phone: locationData.phone || \"\"\n          },\n          fulfillsOnlineOrders: true\n        };\n\n        // Add metafields if we have unleashed warehouse data\n        if (locationData.warehouseCode) {\n          locationInput.metafields = [\n            {\n              namespace: \"custom\",\n              key: \"warehouse_code\",\n              value: locationData.warehouseCode,\n              type: \"single_line_text_field\"\n            }\n          ];\n        }\n\n        const mutationResult = await executeMutation(\n          baseUrl,\n          headers,\n          CREATE_LOCATION_MUTATION,\n          { input: locationInput }\n        );\n\n        if (mutationResult.locationAdd.userErrors.length > 0) {\n          const errors = mutationResult.locationAdd.userErrors;\n          console.error(`\u274C Failed to create location \"${locationData.name}\":`, errors);\n          results.failed.push({\n            locationData,\n            errors: errors.map(e => `${e.field}: ${e.message}`)\n          });\n        } else {\n          const createdLocation = mutationResult.locationAdd.location;\n          console.log(`\u2705 Successfully created location: \"${createdLocation.name}\" (ID: ${createdLocation.id})`);\n          results.successful.push({\n            originalData: locationData,\n            shopifyLocation: createdLocation\n          });\n        }\n\n        results.totalProcessed++;\n      } catch (error) {\n        console.error(`\u274C Error creating location \"${locationData.name}\":`, error.message);\n        results.failed.push({\n          locationData,\n          errors: [error.message]\n        });\n        results.totalProcessed++;\n      }\n    }\n\n    // Add delay between batches to respect rate limits\n    if (i + MAX_BATCH_SIZE < locationsToCreate.length) {\n      console.log(`\u23F3 Waiting ${MUTATION_DELAY}ms before next batch...`);\n      await new Promise(resolve => setTimeout(resolve, MUTATION_DELAY));\n    }\n  }\n\n  return results;\n}\n\n/**\n * Update locations in batches\n */\nasync function updateLocationsBatch(baseUrl, headers, locationsToUpdate) {\n  const results = {\n    successful: [],\n    failed: [],\n    totalProcessed: 0\n  };\n\n  console.log(`\uD83D\uDCCD Starting update of ${locationsToUpdate.length} locations in batches of ${MAX_BATCH_SIZE}`);\n\n  // Process in batches\n  for (let i = 0; i < locationsToUpdate.length; i += MAX_BATCH_SIZE) {\n    const batch = locationsToUpdate.slice(i, i + MAX_BATCH_SIZE);\n    console.log(`\uD83D\uDCE6 Processing batch ${Math.floor(i / MAX_BATCH_SIZE) + 1} with ${batch.length} locations`);\n\n    // Process each location in the current batch\n    for (const locationData of batch) {\n      try {\n        console.log(`\uD83D\uDD04 Updating location: \"${locationData.name}\" (ID: ${locationData.id})`);\n        console.log(`   New Address: ${locationData.address1}, ${locationData.city}, ${locationData.provinceCode}, ${locationData.countryCode}`);\n\n        // Prepare the location input for Shopify\n        const locationInput = {\n          name: locationData.name,\n          address: {\n            address1: locationData.address1,\n            address2: locationData.address2 || \"\",\n            city: locationData.city,\n            provinceCode: locationData.provinceCode,\n            countryCode: locationData.countryCode,\n            zip: locationData.zip,\n            phone: locationData.phone || \"\"\n          },\n          fulfillsOnlineOrders: true\n        };\n\n        // Add metafields if we have unleashed warehouse data\n        if (locationData.warehouseCode) {\n          locationInput.metafields = [\n            {\n              namespace: \"custom\",\n              key: \"warehouse_code\",\n              value: locationData.warehouseCode,\n              type: \"single_line_text_field\"\n            }\n          ];\n        }\n\n        const mutationResult = await executeMutation(\n          baseUrl,\n          headers,\n          UPDATE_LOCATION_MUTATION,\n          { \n            id: locationData.id,\n            input: locationInput \n          }\n        );\n\n        if (mutationResult.locationEdit.userErrors.length > 0) {\n          const errors = mutationResult.locationEdit.userErrors;\n          console.error(`\u274C Failed to update location \"${locationData.name}\" (ID: ${locationData.id}):`, errors);\n          results.failed.push({\n            locationData,\n            errors: errors.map(e => `${e.field}: ${e.message}`)\n          });\n        } else {\n          const updatedLocation = mutationResult.locationEdit.location;\n          console.log(`\u2705 Successfully updated location: \"${updatedLocation.name}\" (ID: ${updatedLocation.id})`);\n          results.successful.push({\n            originalData: locationData,\n            shopifyLocation: updatedLocation\n          });\n        }\n\n        results.totalProcessed++;\n      } catch (error) {\n        console.error(`\u274C Error updating location \"${locationData.name}\" (ID: ${locationData.id}):`, error.message);\n        results.failed.push({\n          locationData,\n          errors: [error.message]\n        });\n        results.totalProcessed++;\n      }\n    }\n\n    // Add delay between batches to respect rate limits\n    if (i + MAX_BATCH_SIZE < locationsToUpdate.length) {\n      console.log(`\u23F3 Waiting ${MUTATION_DELAY}ms before next batch...`);\n      await new Promise(resolve => setTimeout(resolve, MUTATION_DELAY));\n    }\n  }\n\n  return results;\n}\n\n/**\n * Main function to mutate locations (create and update)\n */\nasync function mutateLocations(authData, mappingResults) {\n  const { accessToken, shopDomain } = authData;\n  const baseUrl = `https://${shopDomain}/admin/api/2025-04`;\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Shopify-Access-Token': accessToken\n  };\n\n  const results = {\n    created: { successful: [], failed: [], totalProcessed: 0 },\n    updated: { successful: [], failed: [], totalProcessed: 0 },\n    summary: {\n      totalLocationsProcessed: 0,\n      totalSuccessful: 0,\n      totalFailed: 0,\n      createdCount: 0,\n      updatedCount: 0,\n      startTime: new Date().toISOString(),\n      endTime: null,\n      duration: null\n    }\n  };\n\n  const startTime = Date.now();\n\n  try {\n    console.log('\uD83D\uDE80 Starting location mutations...');\n    console.log(`\uD83D\uDCCA Summary: ${mappingResults.toCreate.length} to create, ${mappingResults.toUpdate.length} to update`);\n\n    // Create new locations\n    if (mappingResults.toCreate.length > 0) {\n      console.log('\\n\uD83C\uDFD7\uFE0F === CREATING NEW LOCATIONS ===');\n      results.created = await createLocationsBatch(baseUrl, headers, mappingResults.toCreate);\n    } else {\n      console.log('\\n\uD83C\uDFD7\uFE0F === NO NEW LOCATIONS TO CREATE ===');\n    }\n\n    // Update existing locations\n    if (mappingResults.toUpdate.length > 0) {\n      console.log('\\n\uD83D\uDD04 === UPDATING EXISTING LOCATIONS ===');\n      results.updated = await updateLocationsBatch(baseUrl, headers, mappingResults.toUpdate);\n    } else {\n      console.log('\\n\uD83D\uDD04 === NO EXISTING LOCATIONS TO UPDATE ===');\n    }\n\n    // Calculate final summary\n    const endTime = Date.now();\n    results.summary.totalLocationsProcessed = results.created.totalProcessed + results.updated.totalProcessed;\n    results.summary.totalSuccessful = results.created.successful.length + results.updated.successful.length;\n    results.summary.totalFailed = results.created.failed.length + results.updated.failed.length;\n    results.summary.createdCount = results.created.successful.length;\n    results.summary.updatedCount = results.updated.successful.length;\n    results.summary.endTime = new Date().toISOString();\n    results.summary.duration = `${((endTime - startTime) / 1000).toFixed(2)}s`;\n\n    console.log('\\n\uD83C\uDFAF === LOCATION MUTATIONS COMPLETE ===');\n    console.log(`\uD83D\uDCCA Total Processed: ${results.summary.totalLocationsProcessed}`);\n    console.log(`\u2705 Successful: ${results.summary.totalSuccessful} (${results.summary.createdCount} created, ${results.summary.updatedCount} updated)`);\n    console.log(`\u274C Failed: ${results.summary.totalFailed}`);\n    console.log(`\u23F1\uFE0F Duration: ${results.summary.duration}`);\n\n    if (results.summary.totalFailed > 0) {\n      console.log('\\n\u274C Failed Operations:');\n      results.created.failed.forEach(failure => {\n        console.log(`   Create \"${failure.locationData.name}\": ${failure.errors.join(', ')}`);\n      });\n      results.updated.failed.forEach(failure => {\n        console.log(`   Update \"${failure.locationData.name}\": ${failure.errors.join(', ')}`);\n      });\n    }\n\n  } catch (error) {\n    console.error('\uD83D\uDEA8 Critical error during location mutations:', error);\n    throw error;\n  }\n\n  return results;\n}\n\nexport { mutateLocations };"],
  "mappings": "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",
  "names": ["mapCustomers", "mapLocations", "mapProducts", "import_location_mapping", "getAuthData", "corsHeaders"]
}
